package com.example.childrenmovie.ui

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.childrenmovie.data.ContentRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.net.URLDecoder
import java.nio.charset.StandardCharsets

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø–ª–µ–µ—Ä–∞
sealed interface PlayerUiState {
    object Loading : PlayerUiState
    data class Success(val videoUrl: String, val pageUrl: String) : PlayerUiState
    object Closing : PlayerUiState  // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞
    data class Error(val message: String) : PlayerUiState
}

class PlayerViewModel(
    encodedPageUrl: String,
    private val repository: ContentRepository
) : ViewModel() {

    companion object {
        private const val TAG = "PlayerDebug"
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    private val pageUrl: String = URLDecoder.decode(encodedPageUrl, StandardCharsets.UTF_8.name()).also {
        Log.d(TAG, "üé¨ PlayerViewModel —Å–æ–∑–¥–∞–Ω —Å pageUrl: $it")
    }

    private val _uiState = MutableStateFlow<PlayerUiState>(PlayerUiState.Loading)
    val uiState: StateFlow<PlayerUiState> = _uiState.asStateFlow()

    init {
        loadVideoUrl()
    }

    private fun loadVideoUrl() {
        viewModelScope.launch {
            _uiState.value = PlayerUiState.Loading
            Log.d(TAG, "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É URL –≤–∏–¥–µ–æ...")
            try {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                val directVideoUrl = repository.getVideoUrl(pageUrl)
                Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω URL –≤–∏–¥–µ–æ: $directVideoUrl")
                _uiState.value = PlayerUiState.Success(directVideoUrl, pageUrl)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ: ${e.message}", e)
                Log.e(TAG, "‚ùå Stack trace: ${e.stackTraceToString()}")
                _uiState.value = PlayerUiState.Error(e.message ?: "Failed to get video URL")
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç UI –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Closing –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    fun initiateClosing() {
        Log.d(TAG, "üö™ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞")
        _uiState.value = PlayerUiState.Closing
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è PlayerScreen –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    fun onPlayerFullyClosed() {
        Log.d(TAG, "‚úÖ –ü–ª–µ–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç, —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
    }
}