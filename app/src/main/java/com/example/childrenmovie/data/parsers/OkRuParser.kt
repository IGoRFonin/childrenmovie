package com.example.childrenmovie.data.parsers

import android.util.Log
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import org.jsoup.Jsoup

// Data-–∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö OK.ru
data class OkRuOptions(
    @field:Json(name = "flashvars") val flashvars: FlashVars
)

data class FlashVars(
    @field:Json(name = "metadata") val metadata: String
)

data class VideoMetadata(
    @field:Json(name = "videos") val videos: List<VideoQuality>
)

data class VideoQuality(
    @field:Json(name = "name") val name: String,
    @field:Json(name = "url") val url: String,
    @field:Json(name = "disallowed") val disallowed: Boolean
)

class OkRuParser(
    private val client: OkHttpClient,
    private val moshi: Moshi
) : VideoParser {

    companion object {
        private const val TAG = "OkRuParser"
    }

    override fun canParse(url: String): Boolean {
        return url.contains("ok.ru", ignoreCase = true)
    }

    override suspend fun parseVideoUrl(pageUrl: String): String {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –∏–∑: $pageUrl")

                val request = Request.Builder()
                    .url(pageUrl)
                    .addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36")
                    .build()

                val response = client.newCall(request).execute()
                Log.d(TAG, "üì° HTTP —Å—Ç–∞—Ç—É—Å: ${response.code}")

                if (!response.isSuccessful) {
                    throw Exception("Failed to download OK.ru page. Code: ${response.code}")
                }
                val html = response.body?.string() ?: throw Exception("Response body is null")
                Log.d(TAG, "üìÑ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤")

                // –ê–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞ ok.ru:
                // 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å data-module="OKVideo"
                // 2. –ò–∑–≤–ª–µ—á—å JSON –∏–∑ data-options
                // 3. –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å flashvars.metadata
                // 4. –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ videos[]

                val doc = Jsoup.parse(html)
                val videoElement = doc.select("[data-module=OKVideo]").first()
                    ?: throw Exception("Could not find video element with data-module=OKVideo")

                val optionsJson = videoElement.attr("data-options")
                Log.d(TAG, "üîç –ù–∞–π–¥–µ–Ω data-options, —Ä–∞–∑–º–µ—Ä: ${optionsJson.length} —Å–∏–º–≤–æ–ª–æ–≤")

                val optionsAdapter = moshi.adapter(OkRuOptions::class.java)
                val options = optionsAdapter.fromJson(optionsJson)
                    ?: throw Exception("Could not parse data-options")

                val metadataJson = options.flashvars.metadata
                Log.d(TAG, "üì¶ metadata JSON: ${metadataJson.take(300)}...")

                val metadataAdapter = moshi.adapter(VideoMetadata::class.java)
                val metadata = metadataAdapter.fromJson(metadataJson)
                    ?: throw Exception("Could not parse metadata")

                val videos = metadata.videos
                Log.d(TAG, "üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${videos.size} –∫–∞—á–µ—Å—Ç–≤")
                videos.forEach { video ->
                    Log.d(TAG, "  - ${video.name}: ${if (video.disallowed) "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û" else "–¥–æ—Å—Ç—É–ø–Ω–æ"}")
                }

                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞: full > hd > sd > low > lowest > mobile
                val qualityPriority = listOf("full", "hd", "sd", "low", "lowest", "mobile")

                var bestVideo: String? = null
                for (quality in qualityPriority) {
                    val video = videos.find { it.name == quality && !it.disallowed }
                    if (video != null) {
                        bestVideo = video.url
                        Log.d(TAG, "‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: $quality")
                        break
                    }
                }

                val finalUrl = bestVideo ?: throw Exception("Could not find any video URL")
                Log.d(TAG, "üé• –§–∏–Ω–∞–ª—å–Ω—ã–π URL –≤–∏–¥–µ–æ: $finalUrl")

                return@withContext finalUrl
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: ${e.message}", e)
                throw e
            }
        }
    }
}
