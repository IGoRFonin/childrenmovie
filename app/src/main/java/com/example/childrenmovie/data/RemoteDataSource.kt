// –§–∞–π–ª: data/RemoteDataSource.kt

package com.example.childrenmovie.data

import android.util.Log
import com.example.childrenmovie.data.parsers.VideoParserFactory
import com.squareup.moshi.Moshi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request

class RemoteDataSource(
    private val client: OkHttpClient,
    private val moshi: Moshi
) {
    companion object {
        private const val TAG = "RemoteDataSource"
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤
    private val parserFactory = VideoParserFactory(client, moshi)

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON-—Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    suspend fun fetchContent(url: String): String {
        return withContext(Dispatchers.IO) { // –í—ã–ø–æ–ª–Ω—è–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            val request = Request.Builder().url(url).build()
            val response = client.newCall(request).execute()
            if (!response.isSuccessful) {
                throw Exception("Failed to download content JSON. Code: ${response.code}")
            }
            response.body?.string() ?: throw Exception("Response body is null")
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
    suspend fun fetchVideoUrl(pageUrl: String): String {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "‚ñ∂Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑: $pageUrl")

                // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
                val parser = parserFactory.getParser(pageUrl)
                Log.d(TAG, "üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä: ${parser::class.simpleName}")

                // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                val videoUrl = parser.parseVideoUrl(pageUrl)
                Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω URL: $videoUrl")

                return@withContext videoUrl
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: ${e.message}", e)
                throw e
            }
        }
    }
}