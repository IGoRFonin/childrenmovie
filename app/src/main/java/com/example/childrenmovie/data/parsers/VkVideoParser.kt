package com.example.childrenmovie.data.parsers

import android.util.Log
import com.squareup.moshi.Json
import com.squareup.moshi.Moshi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request

data class VkPlayerParams(
    @field:Json(name = "params") val params: List<VkVideoData>
)

data class VkVideoData(
    @field:Json(name = "url144") val url144: String? = null,
    @field:Json(name = "url240") val url240: String? = null,
    @field:Json(name = "url360") val url360: String? = null,
    @field:Json(name = "url480") val url480: String? = null,
    @field:Json(name = "url720") val url720: String? = null,
    @field:Json(name = "url1080") val url1080: String? = null,
    @field:Json(name = "hls") val hls: String? = null,
    @field:Json(name = "dash_sep") val dashSep: String? = null,
    @field:Json(name = "dash_webm") val dashWebm: String? = null,
    @field:Json(name = "dash_webm_av1") val dashWebmAv1: String? = null
)

class VkVideoParser(
    private val client: OkHttpClient,
    private val moshi: Moshi
) : VideoParser {

    companion object {
        private const val TAG = "VkVideoParser"

        // –°–∏–º–≤–æ–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∫—É–∫–∏
        private const val COOKIE_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        private const val COOKIE_LENGTH = 15
    }

    override fun canParse(url: String): Boolean {
        return url.contains("vkvideo.ru", ignoreCase = true) ||
               url.contains("vk.com/video", ignoreCase = true)
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫—É–∫—É remixdsid –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã VK Video
     * –§–æ—Ä–º–∞—Ç: 15 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
     */
    private fun generateRandomRemixdsid(): String {
        return (1..COOKIE_LENGTH)
            .map { COOKIE_CHARS.random() }
            .joinToString("")
    }

    override suspend fun parseVideoUrl(pageUrl: String): String {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –∏–∑ vkvideo.ru: $pageUrl")

                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫—É–∫–∏ remixdsid –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã VK
                val remixdsid = generateRandomRemixdsid()
                Log.d(TAG, "üç™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫—É–∫–∞: remixdsid=$remixdsid")

                val request = Request.Builder()
                    .url(pageUrl)
                    .addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36")
                    .addHeader("Cookie", "remixdsid=$remixdsid")
                    .build()

                val response = client.newCall(request).execute()
                Log.d(TAG, "üì° HTTP —Å—Ç–∞—Ç—É—Å: ${response.code}")

                if (!response.isSuccessful) {
                    throw Exception("Failed to download vkvideo.ru page. Code: ${response.code}")
                }
                val html = response.body?.string() ?: throw Exception("Response body is null")
                Log.d(TAG, "üìÑ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤")

                // –®–∞–≥ 1: –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ playerParams
                val startMarker = "var playerParams = "
                val startIndex = html.indexOf(startMarker)
                if (startIndex == -1) {
                    throw Exception("Could not find playerParams in HTML")
                }

                Log.d(TAG, "üîç –ù–∞–π–¥–µ–Ω playerParams –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: $startIndex")

                // –®–∞–≥ 2: –ò–∑–≤–ª–µ—á—å JSON —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π —Å–∫–æ–±–æ–∫
                val jsonStart = startIndex + startMarker.length
                var braceCount = 0
                var jsonEnd = jsonStart

                for (i in jsonStart until html.length) {
                    when (html[i]) {
                        '{' -> braceCount++
                        '}' -> {
                            braceCount--
                            if (braceCount == 0) {
                                jsonEnd = i + 1
                                break
                            }
                        }
                    }
                }

                if (jsonEnd == jsonStart) {
                    throw Exception("Could not find closing brace for playerParams")
                }

                val playerParamsJson = html.substring(jsonStart, jsonEnd)
                Log.d(TAG, "üì¶ –ò–∑–≤–ª–µ—á–µ–Ω JSON, —Ä–∞–∑–º–µ—Ä: ${playerParamsJson.length} —Å–∏–º–≤–æ–ª–æ–≤")

                // –®–∞–≥ 3: –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å Moshi (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
                val adapter = moshi.adapter(VkPlayerParams::class.java)
                val playerParams = adapter.fromJson(playerParamsJson)
                    ?: throw Exception("Could not parse playerParams JSON")

                val videoData = playerParams.params.firstOrNull()
                    ?: throw Exception("playerParams.params is empty")

                // –®–∞–≥ 4: –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ URL
                val availableUrls = mutableMapOf<String, String>()

                videoData.url1080?.let { availableUrls["mp4_1080"] = it }
                videoData.url720?.let { availableUrls["mp4_720"] = it }
                videoData.url480?.let { availableUrls["mp4_480"] = it }
                videoData.url360?.let { availableUrls["mp4_360"] = it }
                videoData.url240?.let { availableUrls["mp4_240"] = it }
                videoData.url144?.let { availableUrls["mp4_144"] = it }
                videoData.hls?.let { availableUrls["hls"] = it }
                videoData.dashSep?.let { availableUrls["dash_sep"] = it }
                videoData.dashWebm?.let { availableUrls["dash_webm"] = it }
                videoData.dashWebmAv1?.let { availableUrls["dash_webm_av1"] = it }

                Log.d(TAG, "üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${availableUrls.size} —Ñ–æ—Ä–º–∞—Ç–æ–≤")
                availableUrls.forEach { (format, url) ->
                    Log.d(TAG, "  - $format: ${url.take(60)}...")
                }

                // –®–∞–≥ 5: –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: mp4_1080 > mp4_720 > mp4_480 > hls > mp4_360 > mp4_240 > mp4_144
                val qualityPriority = listOf(
                    "mp4_1080", "mp4_720", "mp4_480", "hls",
                    "mp4_360", "mp4_240", "mp4_144"
                )

                var bestUrl: String? = null
                for (quality in qualityPriority) {
                    if (availableUrls.containsKey(quality)) {
                        bestUrl = availableUrls[quality]
                        Log.d(TAG, "‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: $quality")
                        break
                    }
                }

                val finalUrl = bestUrl ?: throw Exception("Could not find any video URL")
                Log.d(TAG, "üé• –§–∏–Ω–∞–ª—å–Ω—ã–π URL –≤–∏–¥–µ–æ: $finalUrl")

                return@withContext finalUrl
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: ${e.message}", e)
                throw e
            }
        }
    }
}
